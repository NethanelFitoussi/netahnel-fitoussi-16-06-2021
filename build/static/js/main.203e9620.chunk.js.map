{"version":3,"sources":["redux/actions/action.js","redux/types/type.js","components/Favorite.jsx","components/Top.jsx","components/Weather.jsx","App.js","redux/reducers/weatherReducer.js","redux/reducers/reducer.js","redux/store/store.js","serviceWorker.js","index.js"],"names":["activePage","active","dispatch","a","type","payload","Favorite","props","state","items","metric","this","favorite","map","fav","i","axios","get","id","then","res","console","log","data","Temperature","Imperial","Value","setState","prevState","name","celcius","Metric","fahrenheit","text","WeatherText","className","item","onClick","deleteFavorite","class","Component","connect","weatherReducer","Top","changePage","page","darkMode","isDark","dark","Weather","changeMetric","geolocation","changeWeather","convertDay","date","Date","toLocaleDateString","year","month","day","latitude","longitude","city","citySelected","navigator","getCurrentPosition","position","_geoloc","coords","Key","ParentCity","EnglishName","currentWeather","onSearch","string","results","forEach","element","LocalizedName","push","onSelect","autoFocus","addFavorite","current","Unit","alt","src","weather","DailyForecasts","Minimum","Maximum","App","initialState","action","filter","combineReducers","composeEnhancer","compose","middleWare","thunk","store","createStore","reducer","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8YAcaA,EAAa,SAACC,GACvB,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAAEE,KCZC,SDYaC,QAASJ,IAD/B,2CAAP,uD,iBETEK,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,GACPC,QAAQ,GALG,E,gEAUE,IAAD,OAChBC,KAAKJ,MAAMK,SAASC,KAAI,SAACC,EAAKC,GAAN,OACpBC,IAAMC,IAAN,mEAAsEH,EAAII,GAA1E,6CACKC,MAAK,SAAAC,GACFC,QAAQC,IAAI,MAAOF,EAAIG,KAAK,GAAGC,YAAYC,SAASC,OACpD,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBnB,MAAM,GAAD,mBAAMmB,EAAUnB,OAAhB,CAAuB,CAACoB,KAAMf,EAAIe,KAAMX,GAAIJ,EAAII,GAAIY,QAASV,EAAIG,KAAK,GAAGC,YAAYO,OAAOL,MAAOM,WAAYZ,EAAIG,KAAK,GAAGC,YAAYC,SAASC,MAAOO,KAAMb,EAAIG,KAAK,GAAGW,2B,+BAOxL,IAAD,OAGL,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OAEXxB,KAAKH,MAAMC,MAAMI,KAAI,SAACuB,EAAMrB,GAAP,OACjB,yBAAKoB,UAAU,YACX,yBAAKA,UAAU,QACX,6BACI,4BAAQA,UAAU,SAASE,QAAS,kBAAM,EAAK9B,MAAM+B,eAAe,CAAGpB,GAAIkB,EAAKlB,OAAhF,MAEJ,yBAAKqB,MAAM,aACP,wBAAIA,MAAM,cAAcH,EAAKP,MAC7B,uBAAGU,MAAM,aAED,EAAK/B,MAAME,OACP0B,EAAKN,QAELM,EAAKJ,WALjB,OAUQ,EAAKxB,MAAME,OACP,IAEA,KAIZ,2BAEQ0B,EAAKH,mB,GA3D9BO,aAgFRC,eANS,SAAAjC,GACpB,MAAO,CACHI,SAAUJ,EAAMkC,eAAe9B,YAIC,CAAE0B,eF5DZ,SAAC1B,GAC3B,8CAAO,WAAOV,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAAEE,KCzBU,kBDyBaC,QAASO,IADxC,2CAAP,wDE2DW6B,CAA6CnC,GClFtDqC,G,wDACF,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IAUVqC,WAAa,SAACC,GACV,EAAKtC,MAAMP,WAAW6C,IAZP,EAenBC,SAAW,SAACC,GACR,EAAKxC,MAAMuC,SAASC,IAbpB,EAAKvC,MAAQ,GAHE,E,kGAoBT,IAAD,OAEL,OACI,yBAAK2B,UAAU,UACX,yBAAKA,UAAU,QAAf,eAGA,yBAAKA,UAAU,SACX,uBAAGE,QAAS,kBAAM,EAAKS,UAAU,EAAKvC,MAAMyC,QAA5C,eACA,uBAAGb,UAAiC,YAAtBxB,KAAKJ,MAAMN,OAAuB,SAAW,GAAIoC,QAAS,kBAAM,EAAKO,WAAW,aAA9F,WACA,uBAAGT,UAAiC,aAAtBxB,KAAKJ,MAAMN,OAAwB,SAAW,GAAIoC,QAAS,kBAAM,EAAKO,WAAW,cAA/F,kB,GA/BFJ,cA6CHC,eAPS,SAAAjC,GACpB,MAAO,CACHP,OAAQO,EAAMkC,eAAezC,OAC7B+C,KAAMxC,EAAMkC,eAAeM,QAIK,CAAEhD,aAAY8C,SHjB9B,SAACE,GACrB,8CAAO,WAAO9C,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAAEE,KC7BD,OD6BaC,QAAS2C,IAD7B,2CAAP,wDGgBWP,CAAmDE,G,wBCzC5DM,E,kDACF,WAAY1C,GAAQ,IAAD,8BACf,cAAMA,IA8DV2C,aAAe,WACX,EAAKvB,SAAS,CAAEjB,QAAS,EAAKF,MAAME,SACpCM,IAAMC,IAAN,sEAAyE,EAAKT,MAAM2C,YAApF,2DAAkJ,EAAK3C,MAAME,OAA7J,MACSS,MAAK,SAAAC,GACF,EAAKb,MAAM6C,cAAchC,EAAIG,UAnE1B,EAuEnB8B,WAAa,SAACC,GAEV,OAAO,IAAIC,KAAKD,GAAME,mBAAmB,GAD3B,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,aArErD,EAAKnD,MAAQ,CACTqB,KAAM,GACN+B,SAAU,GACVC,UAAW,GACXV,aAAa,EACb1C,MAAO,GACPqD,KAAM,GACNpD,QAAQ,EACRqD,aAAc,IAGlBC,UAAUb,YAAYc,oBAAmB,SAACC,GACtC,EAAKC,QAAQD,EAASE,OAAOR,SAAUM,EAASE,OAAOP,cAf5C,E,8GAuCG,IAAD,OACZlD,KAAKH,MAAM2C,aAAuC,KAAxBxC,KAAKH,MAAMoD,UAA4C,KAAzBjD,KAAKH,MAAMqD,WACpE7C,IAAMC,IAAN,+HAAkIN,KAAKH,MAAMoD,SAA7I,cAA2JjD,KAAKH,MAAMqD,YACjK1C,MAAK,SAAAC,GACF,EAAKO,SAAS,CAAEwB,YAAa/B,EAAIG,KAAK8C,IAAKN,aAAc3C,EAAIG,KAAK+C,WAAWC,iBAKrF5D,KAAKH,MAAM2C,aAAuC,KAAxBxC,KAAKH,MAAMoD,UAA4C,KAAzBjD,KAAKH,MAAMqD,YACnE7C,IAAMC,IAAN,mEAAsEN,KAAKH,MAAM2C,YAAjF,6CACKhC,MAAK,SAAAC,GACF,EAAKO,SAAS,CAAEiC,SAAU,GAAIC,UAAW,KAEzC,EAAKtD,MAAMiE,eAAepD,EAAIG,SAGtCP,IAAMC,IAAN,sEAAyEN,KAAKH,MAAM2C,YAApF,2DAAkJxC,KAAKH,MAAME,SACxJS,MAAK,SAAAC,GACF,EAAKb,MAAM6C,cAAchC,EAAIG,Y,8BAkBrCqC,EAAUC,GACdlD,KAAKgB,SAAS,CAAEiC,SAAUA,EAAUC,UAAWA,M,+BAGzC,IAAD,OAmCL,OACI,kBAAC,WAAD,KACI,yBAAK1B,UAAU,OACX,yBAAKA,UAAU,oBACX,kBAAC,0BAAD,CACI1B,MAAOE,KAAKH,MAAMC,MAClBgE,SAvCG,SAACC,EAAQC,GAI5B3D,IAAMC,IAAN,yHAA4HyD,IACvHvD,MAAK,SAAAC,GACF,IAAMgB,EAAO,GACbhB,EAAIG,KAAKqD,SAAQ,SAAAC,GACb,IAAMtD,EAAO,CACTL,GAAI2D,EAAQR,IACZxC,KAAMgD,EAAQC,eAElB1C,EAAK2C,KAAKxD,MAEd,EAAKI,SAAS,CAAElB,MAAO2B,QA0Bf4C,SArBG,SAAC5C,GACpBpB,IAAMC,IAAN,mEAAsEmB,EAAKlB,GAA3E,6CACKC,MAAK,SAAAC,GACF,EAAKO,SAAS,CAAEiC,SAAU,GAAIC,UAAW,GAAIV,YAAaf,EAAKlB,GAAI6C,aAAc3B,EAAKP,OAEtF,EAAKtB,MAAMiE,eAAepD,EAAIG,SAGtCP,IAAMC,IAAN,sEAAyEmB,EAAKlB,GAA9E,2DAAmI,EAAKV,MAAME,SACzIS,MAAK,SAAAC,GACF,EAAKb,MAAM6C,cAAchC,EAAIG,UAYrB0D,WAAS,MAKrB,yBAAK9C,UAAU,OACX,yBAAKA,UAAU,uCACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,kCACX,wBAAIA,UAAU,QAAQxB,KAAKH,MAAMuD,cACjC,4BAAQ5B,UAAU,gBAAgBE,QAAS,kBAAM,EAAKa,iBAClD,kBAAC,IAAD,MAEIvC,KAAKH,MAAME,OACP,QAEA,SAIZ,4BAAQyB,UAAU,eAAeE,QAAS,kBAAM,EAAK9B,MAAM2E,YAAY,CAAChE,GAAI,EAAKV,MAAM2C,YAAatB,KAAM,EAAKrB,MAAMuD,iBACjH,kBAAC,IAAD,MADJ,mBAIA,wBAAI5B,UAAU,SAENxB,KAAKH,MAAME,OACPC,KAAKJ,OAASI,KAAKJ,MAAM4E,SAAWxE,KAAKJ,MAAM4E,QAAQ,IAAMxE,KAAKJ,MAAM4E,QAAQ,GAAG3D,YAAYO,OAAOL,MAEtGf,KAAKJ,OAASI,KAAKJ,MAAM4E,SAAWxE,KAAKJ,MAAM4E,QAAQ,IAAMxE,KAAKJ,MAAM4E,QAAQ,GAAG3D,YAAYC,SAASC,MALpH,OAUQf,KAAKH,MAAME,OACPC,KAAKJ,OAASI,KAAKJ,MAAM4E,SAAWxE,KAAKJ,MAAM4E,QAAQ,IAAMxE,KAAKJ,MAAM4E,QAAQ,GAAG3D,YAAYO,OAAOqD,KAEtGzE,KAAKJ,OAASI,KAAKJ,MAAM4E,SAAWxE,KAAKJ,MAAM4E,QAAQ,IAAMxE,KAAKJ,MAAM4E,QAAQ,GAAG3D,YAAYC,SAAS2D,MAIpH,yBAAKjD,UAAU,yBACX,yBAAKA,UAAU,OAAOkD,IAAI,OAAOC,IAAK3E,KAAKJ,OAASI,KAAKJ,MAAM4E,SAAWxE,KAAKJ,MAAM4E,QAAQ,IAAMxE,KAAKJ,MAAM4E,QAAQ,GAAG3D,YAAYO,OAAOL,MAAQ,GAAK,wGAA0G,+FAEvQ,yBAAKS,UAAU,2BAEPxB,KAAKJ,MAAMgF,SAAW5E,KAAKJ,MAAMgF,QAAQC,gBAAkB7E,KAAKJ,MAAMgF,QAAQC,eAAe3E,KAAI,SAAC0E,GAAD,OAC7F,yBAAKpD,UAAU,kCACX,2BAAOA,UAAU,kBAAkBjB,GAAG,QAChC,EAAKmC,WAAWkC,EAAQhC,OAE9B,yBAAKpB,UAAU,eACX,yBAAKA,UAAU,SAASkD,IAAI,SAASC,IAAKC,EAAQ/D,YAAYiE,QAAQ/D,MAAQ,GAAK,kCAAoC,qCAE3H,4BAAI,gCAAS6D,EAAQ/D,YAAYiE,QAAQ/D,MAArC,MAA+C6D,EAAQ/D,YAAYkE,QAAQhE,MAA3E,OAAwF6D,EAAQ/D,YAAYkE,QAAQN,qB,GAlLlJ5C,aAyMPC,eATS,SAAAjC,GACpB,MAAO,CACH+E,QAAS/E,EAAMkC,eAAe6C,QAC9BJ,QAAS3E,EAAMkC,eAAeyC,QAC9BvE,SAAUJ,EAAMkC,eAAe9B,SAC/BX,OAAQO,EAAMkC,eAAezC,UAIG,CAAEmD,cJ/Mb,SAACmC,GAC1B,8CAAO,WAAOrF,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAAEE,KCJE,UDIaC,QAASkF,IADhC,2CAAP,uDI8MqDf,eJzM3B,SAACW,GAC3B,8CAAO,WAAOjF,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAAEE,KCTE,UDSaC,QAAS8E,IADhC,2CAAP,uDIwMqEnF,aAAYkF,YJ7L1D,SAACtE,GACxB,8CAAO,WAAOV,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAAEE,KCpBG,WDoBaC,QAASO,IADjC,2CAAP,wDI4LW6B,CAAqFQ,GCzM9F0C,E,kDACJ,WAAYpF,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,GAHE,E,kGAef,OACA,yBAAK2B,UAAWxB,KAAKJ,MAAMyC,KAAO,aAAe,IAC/C,yBAAKb,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAY,iBAEO,YAAtBxB,KAAKJ,MAAMN,OACT,kBAAC,EAAD,MAEA,kBAAC,EAAD,a,GAzBIuC,aA2CHC,eAPS,SAAAjC,GACtB,MAAO,CACHP,OAAQO,EAAMkC,eAAezC,OAC7B+C,KAAMxC,EAAMkC,eAAeM,QAIO,GAAzBP,CAA+BkD,G,uBC3CxCC,EAAe,CACjBL,QAAS,GACT3E,SAAU,GACVuE,QAAS,GACTlF,OAAQ,UACR+C,MAAM,GAqCKN,EAlCQ,WAAmC,IAAlClC,EAAiC,uDAAzBoF,EAAcC,EAAW,uCACrD,OAAQA,EAAOzF,MACX,ILlBa,UKmBT,OAAO,2BACAI,GADP,IACc+E,QAASM,EAAOxF,UAElC,ILrBa,UKsBT,OAAO,2BACAG,GADP,IACc2E,QAASU,EAAOxF,UAElC,ILxBc,WKyBV,OAAO,2BACAG,GADP,IACcI,SAAS,GAAD,mBAAMJ,EAAMI,UAAZ,CAAsBiF,EAAOxF,YAEvD,IL3BqB,kBK4BjB,OAAO,2BACAG,GADP,IAEII,SAAUJ,EAAMI,SAASkF,QACrB,SAAChF,GAAD,OAASA,EAAII,KAAO2E,EAAOxF,QAAQa,QAG/C,ILjCY,SKkCR,OAAO,2BACAV,GADP,IACcP,OAAQ4F,EAAOxF,UAEjC,ILpCU,OKqCN,OAAO,2BACAG,GADP,IACcwC,KAAM6C,EAAOxF,UAE/B,QACI,OAAOG,IC3CJuF,cAAgB,CAC3BrD,mB,QCCEsD,EAGkDC,IAElDC,EACiD,CAACC,KAE3CC,EAAQC,YACjBC,EAASN,EAAgBO,IAAe,WAAf,EAAmBL,KCF5BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,QAIJC,SAASC,eAAe,SDmHpB,kBAAmBjD,WACrBA,UAAUkD,cAAcC,MACrBhG,MAAK,SAAAiG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlG,QAAQkG,MAAMA,EAAMC,c","file":"static/js/main.203e9620.chunk.js","sourcesContent":["import { WEATHER, FAVORITE, CURRENT, ACTIVE, DARK, DELETE_FAVORITE } from '../types/type';\n\nexport const changeWeather = (weather) => {\n    return async (dispatch) => {\n        dispatch({ type: WEATHER, payload: weather })\n    }\n}\n\nexport const currentWeather = (current) => {\n    return async (dispatch) => {\n        dispatch({ type: CURRENT, payload: current })\n    }\n}\n\nexport const activePage = (active) => {\n    return async (dispatch) => {\n        dispatch({ type: ACTIVE, payload: active })\n    }\n}\n\nexport const addFavorite = (favorite) => {\n    return async (dispatch) => {\n        dispatch({ type: FAVORITE, payload: favorite })\n    }\n}\n\nexport const deleteFavorite = (favorite) => {\n    return async (dispatch) => {\n        dispatch({ type: DELETE_FAVORITE, payload: favorite })\n    }\n}\n\nexport const darkMode = (dark) => {\n    return async (dispatch) => {\n        dispatch({ type: DARK, payload: dark })\n    }\n}","export const WEATHER=\"WEATHER\";\nexport const CURRENT=\"CURRENT\";\nexport const FAVORITE=\"FAVORITE\";\nexport const DELETE_FAVORITE=\"DELETE_FAVORITE\";\nexport const ACTIVE=\"ACTIVE\";\nexport const DARK=\"DARK\";","import React, { Fragment, Component } from 'react';\nimport './Favorite.css';\nimport { connect } from 'react-redux';\nimport { deleteFavorite } from '../redux/actions/action';\nimport axios from 'axios';\n\nclass Favorite extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: [],\n            metric: true,\n        };\n\n    }\n\n    componentDidMount() {\n        this.props.favorite.map((fav, i) => (\n            axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${fav.id}?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN`)\n                .then(res => {\n                    console.log('res', res.data[0].Temperature.Imperial.Value);\n                    this.setState(prevState => ({\n                        items: [...prevState.items, {name: fav.name, id: fav.id, celcius: res.data[0].Temperature.Metric.Value, fahrenheit: res.data[0].Temperature.Imperial.Value, text: res.data[0].WeatherText }]\n                    }))\n                })\n        ))\n    }\n\n\n    render() {\n\n\n        return (\n            <Fragment>\n                <div className=\"container\">\n                    <div className=\"row\">\n                    {\n                        this.state.items.map((item, i) => (\n                            <div className=\"col-md-4\">\n                                <div className=\"bloc\">\n                                    <div>\n                                        <button className=\"delete\" onClick={() => this.props.deleteFavorite({  id: item.id})}>X</button >\n                                    </div>\n                                    <div class=\"card-body\">\n                                        <h5 class=\"card-title\">{item.name}</h5>\n                                        <p class=\"card-text\">\n                                            {\n                                                this.state.metric ? (\n                                                    item.celcius\n                                                ) : (\n                                                    item.fahrenheit\n                                                )\n                                            }\n                                            &#176;\n                                            {\n                                                this.state.metric ? (\n                                                    'C'\n                                                ) : (\n                                                    'F'\n                                                )\n                                            }\n                                        </p>\n                                        <p>\n                                            {\n                                                item.text\n                                            }\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                        ))\n                    }\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        favorite: state.weatherReducer.favorite\n    }\n}\n\nexport default connect(mapStateToProps, { deleteFavorite })(Favorite);","import React, { Component } from 'react';\nimport './Top.css';\nimport { connect } from 'react-redux';\nimport { activePage, darkMode } from '../redux/actions/action';\nclass Top extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n\n    }\n\n    componentDidMount() {\n    }\n\n    changePage = (page) => {\n        this.props.activePage(page)\n    }\n\n    darkMode = (isDark) => {\n        this.props.darkMode(isDark)\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"topnav\">\n                <div className=\"left\">\n                    Weather App\n                </div>\n                <div className=\"right\">\n                    <a onClick={() => this.darkMode(!this.props.dark)}>Change Mode</a>\n                    <a className={this.props.active === 'weather' ? 'active' : ''} onClick={() => this.changePage('weather')}>Weather</a>\n                    <a className={this.props.active === 'favorite' ? 'active' : ''} onClick={() => this.changePage('favorite')}>Favorite</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.weatherReducer.active,\n        dark: state.weatherReducer.dark,\n    }\n}\n\nexport default connect(mapStateToProps, { activePage, darkMode })(Top);","import React, { Fragment, Component } from 'react';\nimport './Weather.css';\nimport { FaTemperatureHigh, FaRegHeart } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport { changeWeather, currentWeather, activePage, addFavorite } from '../redux/actions/action';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\nimport axios from 'axios';\n\nclass Weather extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: '',\n            latitude: '',\n            longitude: '',\n            geolocation: false,\n            items: '',\n            city: '',\n            metric: true,\n            citySelected: '',\n        };\n\n        navigator.geolocation.getCurrentPosition((position) => {\n            this._geoloc(position.coords.latitude, position.coords.longitude);\n        });\n\n    }\n\n    componentDidMount() {\n\n\n\n        // axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/215854?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN&metric=true`)\n        //     .then(res => {\n        //         console.log(res);\n        //         console.log(res.data);\n        //         this.props.changeWeather(res.data)\n        //     });\n\n        // axios.get(`https://dataservice.accuweather.com/currentconditions/v1/215854?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN`)\n        //     .then(res => {\n        //         console.log(res);\n        //         console.log(res.data);\n        //         this.props.currentWeather(res.data)\n        //     });\n    }\n\n    componentDidUpdate() {\n        if (!this.state.geolocation && this.state.latitude !== '' && this.state.longitude !== '') {\n            axios.get(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN&q=${this.state.latitude}%2C${this.state.longitude}`)\n                .then(res => {\n                    this.setState({ geolocation: res.data.Key, citySelected: res.data.ParentCity.EnglishName });\n                });\n\n        }\n\n        if (this.state.geolocation && this.state.latitude !== '' && this.state.longitude !== '') {\n            axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${this.state.geolocation}?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN`)\n                .then(res => {\n                    this.setState({ latitude: '', longitude: '' });\n\n                    this.props.currentWeather(res.data)\n                });\n\n            axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${this.state.geolocation}?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN&metric=${this.state.metric}`)\n                .then(res => {\n                    this.props.changeWeather(res.data)\n                });\n        }\n    }\n\n    changeMetric = () => {\n        this.setState({ metric: !this.state.metric });\n        axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${this.state.geolocation}?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN&metric=${this.state.metric}s`)\n                .then(res => {\n                    this.props.changeWeather(res.data)\n                });\n    }\n\n    convertDay = (date) => {\n        var options = { year: 'numeric', month: 'long', day: 'numeric' };\n        return new Date(date).toLocaleDateString([],options);\n\n    }\n    _geoloc(latitude, longitude) {\n        this.setState({ latitude: latitude, longitude: longitude });\n    }\n\n    render() {\n\n        const handleOnSearch = (string, results) => {\n            // onSearch will have as the first callback parameter\n            // the string searched and for the second the results.\n\n            axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN&q=${string}`)\n                .then(res => {\n                    const item = [];\n                    res.data.forEach(element => {\n                        const data = {\n                            id: element.Key,\n                            name: element.LocalizedName\n                        }\n                        item.push(data);\n                    });\n                    this.setState({ items: item });\n                })\n        }\n\n\n        const handleOnSelect = (item) => {\n            axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${item.id}?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN`)\n                .then(res => {\n                    this.setState({ latitude: '', longitude: '', geolocation: item.id, citySelected: item.name });\n\n                    this.props.currentWeather(res.data)\n                });\n\n            axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${item.id}?apikey=U54qJgB86bLBZvylGJThkT61T94rJtGN&metric=${this.state.metric}`)\n                .then(res => {\n                    this.props.changeWeather(res.data)\n                });\n        }\n\n        return (\n            <Fragment>\n                <div className=\"row\">\n                    <div className=\"search-container\">\n                        <ReactSearchAutocomplete\n                            items={this.state.items}\n                            onSearch={handleOnSearch}\n                            onSelect={handleOnSelect}\n                            autoFocus\n                        />\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"container px-1 px-sm-4 py-5 mx-auto\">\n                        <div className=\"row d-flex justify-content-center\">\n                            <div className=\"card text-center pt-4 border-0\">\n                                <h4 className=\"mb-0\">{this.state.citySelected}</h4>\n                                <button className=\"button-change\" onClick={() => this.changeMetric()}>\n                                    <FaTemperatureHigh />\n                                    {\n                                        this.state.metric ? (\n                                            \"°F\"\n                                        ) : (\n                                            '°C'\n                                        )\n                                    }\n                                </button>\n                                <button className=\"add-favorite\" onClick={() => this.props.addFavorite({id: this.state.geolocation, name: this.state.citySelected})}>\n                                    <FaRegHeart />\n                                        Add to favorite\n                                </button>\n                                <h2 className=\"large\">\n                                    {\n                                        this.state.metric ? (\n                                            this.props && this.props.current && this.props.current[0] && this.props.current[0].Temperature.Metric.Value\n                                        ) : (\n                                            this.props && this.props.current && this.props.current[0] && this.props.current[0].Temperature.Imperial.Value\n                                        )\n                                    }\n                                    &#176;\n                                    {\n                                        this.state.metric ? (\n                                            this.props && this.props.current && this.props.current[0] && this.props.current[0].Temperature.Metric.Unit\n                                        ) : (\n                                            this.props && this.props.current && this.props.current[0] && this.props.current[0].Temperature.Imperial.Unit\n                                        )\n                                    }\n                                </h2>\n                                <div className=\"text-center mt-3 mb-4\">\n                                    <img className=\"city\" alt=\"city\" src={this.props && this.props.current && this.props.current[0] && this.props.current[0].Temperature.Metric.Value < 23 ? \"https://www.employers.org/images/directory/newsletter_content/2020/September/bad_weather_blog_sml.jpg\" : \"https://s7d2.scene7.com/is/image/TWCNews/sunshine_jpg-5goodjpg?wid=1250&hei=703&$wide-bg$\"} />\n                                </div>\n                                <div className=\"row d-flex px-3 mt-auto\">\n                                    {\n                                        this.props.weather && this.props.weather.DailyForecasts && this.props.weather.DailyForecasts.map((weather) => (\n                                            <div className=\"d-flex flex-column block first\">\n                                                <small className=\"text-muted mb-0\" id=\"date\">\n                                                    { this.convertDay(weather.Date) }\n                                                </small>\n                                                <div className=\"text-center\">\n                                                    <img className=\"symbol\" alt=\"symbol\" src={weather.Temperature.Minimum.Value < 23 ? \"https://i.imgur.com/BeWfUuG.png\" : \"https://i.imgur.com/Shrg84B.png\"} />\n                                                </div>\n                                                <h6><strong>{weather.Temperature.Minimum.Value} - {weather.Temperature.Maximum.Value}&#176;{weather.Temperature.Maximum.Unit}</strong></h6>\n                                            </div>\n                                        ))\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        weather: state.weatherReducer.weather,\n        current: state.weatherReducer.current,\n        favorite: state.weatherReducer.favorite,\n        active: state.weatherReducer.active,\n    }\n}\n\nexport default connect(mapStateToProps, { changeWeather, currentWeather, activePage, addFavorite })(Weather);","import React, { Component } from 'react';\nimport './App.css';\nimport Favorite from './components/Favorite';\nimport Top from './components/Top';\nimport Weather from './components/Weather';\nimport { connect } from 'react-redux';\n\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n      };\n\n  }\n\n  componentDidMount() {\n  }\n\n\n  render() {\n\n\n      return (\n      <div className={this.props.dark ? 'theme-dark' : ''}>\n        <div className=\"container\">\n          <Top />\n          <div className = \"App container\" >\n          {\n            this.props.active === 'weather' ? (\n              <Weather / >\n            ) : (\n              <Favorite / >\n            )\n\n          }\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n      active: state.weatherReducer.active,\n      dark: state.weatherReducer.dark,\n  }\n}\n\nexport default connect(mapStateToProps, {  })(App);","import {\n    WEATHER,\n    FAVORITE,\n    CURRENT,\n    ACTIVE,\n    DARK,\n    DELETE_FAVORITE\n} from '../types/type';\nconst initialState = {\n    weather: [],\n    favorite: [],\n    current: [],\n    active: 'weather',\n    dark: false,\n};\n\nconst weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case WEATHER:\n            return {\n                ...state, weather: action.payload\n            };\n        case CURRENT:\n            return {\n                ...state, current: action.payload\n            };\n        case FAVORITE:\n            return {\n                ...state, favorite: [...state.favorite, action.payload]\n            };\n        case DELETE_FAVORITE:\n            return {\n                ...state,\n                favorite: state.favorite.filter(\n                    (fav) => fav.id !== action.payload.id\n                )\n            };\n        case ACTIVE:\n            return {\n                ...state, active: action.payload\n            };\n        case DARK:\n            return {\n                ...state, dark: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer;","import { combineReducers } from 'redux';\nimport weatherReducer from './weatherReducer';\n\nexport default combineReducers({\n    weatherReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport logger from 'redux-logger'\nimport reducer from \"../reducers/reducer\";\nimport thunk from \"redux-thunk\";\n\nconst composeEnhancer =\n    (process.env.NODE_ENV !== 'production' &&\n        typeof window !== 'undefined' &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst middleWare = (process.env.NODE_ENV !== 'production' &&\n    typeof window !== 'undefined') ? [thunk, logger] : [thunk];\n\nexport const store = createStore(\n    reducer, composeEnhancer(applyMiddleware(...middleWare)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from './redux/store/store.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}